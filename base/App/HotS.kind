// TODO: limitar pra 6 jogadores
// TODO: custo inicial = 0
// TODO: mostrar times

// App states (local = clicks, global = visitors)
App.HotS.State: App.State
  App.State.new(App.HotS.State.Local, App.HotS.State.Global)

// Initial state
App.HotS.init: App.Init<App.HotS.State>
  let bids = {} :: Map<App.HotS.Bid>
  let cash = {
    "Green": 23
    "Blue": 24
    "Red": 25
    "Yellow": 26
    "Purple": 27
    "White": 28
    "Black": 29
    "Orange": 30
  } :: Map<Nat>
  App.Store.new<App.HotS.State>(App.HotS.State.Local.new(false, "", ""), App.HotS.State.Global.new(bids, cash))

type App.HotS.State.Local {
  new(
    joined: Bool
    room: String
    team: String
  )
}

type App.HotS.State.Global {
  new(
    bids: Map<App.HotS.Bid>
    cash: Map<Nat>
  )
}

type App.HotS.Player {
  new(
    rank: String
  )
}

type App.HotS.Bid {
  new(
    value: Nat
    team: String
  )
}

type App.HotS.Action {
  buy(
    team: String
    player: String
  )
} deriving (serializer, deserializer)

App.HotS.players: Map<App.HotS.Player>
  {
    "Adones": App.HotS.Player.new("?")
    "AnneO": App.HotS.Player.new("?")
    "Arluki": App.HotS.Player.new("?")
    "ChampofHorde": App.HotS.Player.new("?")
    "Crono": App.HotS.Player.new("?")
    "Dashblue": App.HotS.Player.new("?")
    "Derenash": App.HotS.Player.new("?")
    "Drau": App.HotS.Player.new("?")
    "Dugalle": App.HotS.Player.new("?")
    "Entropy": App.HotS.Player.new("?")
    "Escondidinho": App.HotS.Player.new("?")
    "Exorr": App.HotS.Player.new("?")
    "FFJujubaKid": App.HotS.Player.new("?")
    "Focofi": App.HotS.Player.new("?")
    "GiantAxe": App.HotS.Player.new("?")
    "Goddan": App.HotS.Player.new("?")
    "Josuecs": App.HotS.Player.new("?")
    "Juzehlito": App.HotS.Player.new("?")
    "Katson": App.HotS.Player.new("?")
    "KchoXs": App.HotS.Player.new("?")
    "Korhal": App.HotS.Player.new("?")
    "Kristrex": App.HotS.Player.new("?")
    "MacSF": App.HotS.Player.new("?")
    "Malvadah": App.HotS.Player.new("?")
    "MatadorFivee": App.HotS.Player.new("?")
    "Monthoros": App.HotS.Player.new("?")
    "Moonlight": App.HotS.Player.new("?")
    "Motta": App.HotS.Player.new("?")
    "MrNewVegas": App.HotS.Player.new("?")
    "Patoshin": App.HotS.Player.new("?")
    "Pitchulinha": App.HotS.Player.new("?")
    "Player": App.HotS.Player.new("?")
    "Predator": App.HotS.Player.new("?")
    "Psycho": App.HotS.Player.new("?")
    "RamonBR": App.HotS.Player.new("?")
    "Rooxyz": App.HotS.Player.new("?")
    "Simon": App.HotS.Player.new("?")
    "Sipher": App.HotS.Player.new("?")
    "SpyGames": App.HotS.Player.new("?")
    "Talicwolf": App.HotS.Player.new("?")
    "Thunder": App.HotS.Player.new("?")
    "Zaryanova": App.HotS.Player.new("?")
    "Zuiurac": App.HotS.Player.new("?")
  }

// Render function
App.HotS.draw: App.Draw<App.HotS.State>
  (state)
  open state
  open state.global
  open state.local
  let bids = state.global.bids
  let cash = state.global.cash
  let team = state.local.team
  let joined = state.local.joined
  if Bool.not(joined) then
    <div>
      <div>
        "Room: "
        <input id="_room_"></input>
        " "
        <button id="_enter_">"Enter"</button>
      </div>
      <div>
        "Digite a sala para entrar, ou um nome qualquer para criar uma nova."
      </div>
    </div>
  else
    <div>
      <div style={"height":"40px"}>
        <div style={"margin": "4px"}>
          "Team:"
          " "
          <input id="_team_"></input>
        </div>
        <div style={"margin": "4px"}>
          "Cash: $" | Nat.show(cash{team} <> 0)
        </div>
      </div>
      <div style={
        "height":"calc(100%-40px)"
        "width": "100%"
        "display": "flex"
        "flex-flow": "row wrap"
      }>
        for entry in Map.to_list!(App.HotS.players): 
          let {name, player} = entry
          use bid = bids{name} <> App.HotS.Bid.new(0, "") 
          <div style={
            "height": "24px"
            "border-radius": "2px"
            "border": "1px solid #A0A0A0"
            "background": "#FAFAFA"
            "margin": "2px"
            "width": "260px"
            "flex-basis": "260px"
            "display": "flex"
            "align-content": "center"
          }>
            {App.HotS.draw.cell(120, <span style={"font-weight":"bold"}>name</span>)}
            {App.HotS.draw.cell(120, <span>bid.team</span>)}
            {App.HotS.draw.cell(40, <span>"$"|Nat.show(bid.value)</span>)}
            {App.HotS.draw.cell(40, <div id=name style={"cursor":"pointer","text-decoration":"underline"}>"buy"</div>)}
          </div>
      </div>
    </div>

App.HotS.draw.cell(width: Nat, child: DOM): DOM
  let style = {
    "display": "inline-block"
    "overflow": "hidden"
    "padding": "4px"
    "width": Nat.show(width)|"px"
    "height": "24px"
  }
  <div style=style>
    {child}
  </div>

// Event handler
App.HotS.when: App.When<App.HotS.State>
  (event, state)
  open state
  use local = state.local
  let team = local.team
  let room = local.room
  case event {
    input: IO {
      switch String.eql(event.id) {
        "_team_": IO {
          App.set_local<App.HotS.State>(local@team <- event.text)
        }
        "_room_": IO {
          App.set_local<App.HotS.State>(local@room <- event.text)
        }
      } default App.pass!
    }
    mouse_click: IO {
      if String.eql(event.id,"_enter_") then IO {
        App.watch!(String.take(16,Crypto.Keccak.hash("0"|room)))
        App.set_local<App.HotS.State>(local@joined <- true)
      } else
        //log(event.id)
        //log("A")
        let player = event.id
        let has_player = Bool.not(String.is_empty(player))
        let has_team = Bool.not(String.is_empty(team))
        if has_player && has_team then IO {
          //log("B")
          //IO.print("clicked: " | event.id)
          let action = App.HotS.Action.buy(team, player)
          let serial = Bits.hex.encode(Serializer.run!(App.HotS.Action.serializer, action))
          let serial = if Nat.mod(String.length(serial),2) =? 0 then serial else serial | "0"
          //log("sent-action: " | action@team | " <- " | action@player)
          //log("sent-serial:" | String.take(16,Crypto.Keccak.hash("0"|room)) | " " | serial)
          App.new_post!(String.take(16,Crypto.Keccak.hash("0"|room)), serial)
          App.pass!
        } else App.pass!
    }
  } default App.pass!

// Global ticker: not used
App.HotS.tick: App.Tick<App.HotS.State>
  App.no_tick<App.HotS.State>

// Global visitor: counts posts to room_zero
App.HotS.post: App.Post<App.HotS.State>
  (time, room, addr, data, global)
  open global
  //log("recv-serial:" | data)
  let post = Deserializer.run!(App.HotS.Action.deserializer, Bits.hex.decode(data)) abort global
  case post {
    buy:
      let initial_cash = 25
      let player_value = (case global.bids{post.player} as bid { none: 0, some: bid.value@value })
      let last_team = (case global.bids{post.player} as bid { none: "", some: bid.value@team })
      let team_cash = global.cash{post.team} <> initial_cash
      let team_size = List.count!((x) String.eql(x@team,post.team), Map.values!(global.bids))
      let rebuy = (case global.bids{post.player} as bid { none: false, some: String.eql(bid.value@team,post.team) })
      let can_buy = if rebuy then team_cash >=? 1 else (team_cash >=? player_value) && (team_size <? 6)
      let player_exists = Map.has!(post.player, App.HotS.players)
      //log(Nat.show(team_cash) | " >=? " | Nat.show(player_value))
      if can_buy && player_exists then
        log(post.team | " purchased " | post.player)
        let bids = global.bids{post.player} <- App.HotS.Bid.new(player_value + 1, post.team)
        let cash = global.cash
        let cash = case global.bids{post.player} as bid {
          none: cash
          some: cash{bid.value@team} <- (cash{bid.value@team} <> initial_cash) + (player_value - 1)
        }
        let cash = cash{post.team} <- (cash{post.team} <> initial_cash) - player_value
        App.HotS.State.Global.new(bids, cash)
      else
        global
  }

// A "HotS, world!" + counter application
App.HotS: App<App.HotS.State>
  App.new<App.HotS.State>(
    App.HotS.init
    App.HotS.draw
    App.HotS.when
    App.HotS.tick
    App.HotS.post
  )
