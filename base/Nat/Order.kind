Nat.Order.refl(a: Nat): Equal<Bool>(Nat.lte(a, a), true)
  case a {
    zero:
      Equal.refl<Bool>(true)
    succ:
      let ind = Nat.Order.refl(a.pred)
      ind
  }: Equal<Bool>(Nat.lte(a, a), true)

Nat.Order.conn(a: Nat, b: Nat): Or<Equal<Bool>(Nat.lte(a, b), true), Equal<Bool>(Nat.lte(b, a), true)>
  case a {
    zero:
      case b {
        zero:
          Either.left<
            Equal<Bool>(Nat.lte(0, 0), true)
            Equal<Bool>(Nat.lte(0, 0), true)
          >(Equal.refl<Bool>(true))
        succ:
          Either.left<
            Equal<Bool>(Nat.lte(0, Nat.succ(b.pred)), true)
            Equal<Bool>(Nat.lte(Nat.succ(b.pred), 0), true)
          >(Equal.refl<Bool>(true))
      }: Or<Equal<Bool>(Nat.lte(0, b), true), Equal<Bool>(Nat.lte(b, 0), true)>
    succ:
      case b {
        zero:
          Either.right<
            Equal<Bool>(Nat.lte(Nat.succ(a.pred), 0), true)
            Equal<Bool>(Nat.lte(0, Nat.succ(a.pred)), true)
          >(Equal.refl<Bool>(true))
        succ:
          let ind = Nat.Order.conn(a.pred, b.pred)
          ind
      }: Or<Equal<Bool>(Nat.lte(Nat.succ(a.pred), b), true), Equal<Bool>(Nat.lte(b, Nat.succ(a.pred)), true)>
  }: Or<Equal<Bool>(Nat.lte(a, b), true), Equal<Bool>(Nat.lte(b, a), true)>

Nat.Order.anti_symm(
  a: Nat
  b: Nat
  Hyp0: Equal<Bool>(Nat.lte(a, b), true)
  Hyp1: Equal<Bool>(Nat.lte(b, a), true)
): Equal<Nat>(a, b)
  (case a {
    zero:
      (Hyp0, Hyp1)
        (case b {
          zero:
            (Hyp0, Hyp1)
              Equal.refl<Nat>(0)
          succ:
            (Hyp0, Hyp1)
              let contra = Bool.true_neq_false(
                Equal.mirror<Bool>(
                  Nat.lte(Nat.succ(b.pred), 0)
                  Bool.true
                  Hyp1
                )
              )
              Empty.absurd<Equal<Nat>(0, Nat.succ(b.pred))>(contra)
        }: (Hyp0: Equal<Bool>(Nat.lte(0, b), true)) -> (Hyp1: Equal<Bool>(Nat.lte(b, 0), true)) -> Equal<Nat>(0, b))(
          Hyp0
          Hyp1
        )
    succ:
      (Hyp0, Hyp1)
        (case b {
          zero:
            (Hyp0, Hyp1)
              let contra = Bool.true_neq_false(
                Equal.mirror<Bool>(
                  Nat.lte(Nat.succ(a.pred), 0)
                  Bool.true
                  Hyp0
                )
              )
              Empty.absurd<Equal<Nat>(Nat.succ(a.pred), 0)>(contra)
          succ:
            (Hyp0, Hyp1)
              let ind = Nat.Order.anti_symm(
                a.pred, b.pred,
                Hyp0, Hyp1,
              )
              let qed = Equal.apply<Nat, Nat>(a.pred, b.pred, Nat.succ, ind)
              qed
        }: (Hyp0: Equal<Bool>(Nat.lte(Nat.succ(a.pred), b), true)) ->
           (Hyp1: Equal<Bool>(Nat.lte(b, Nat.succ(a.pred)), true)) ->
           Equal<Nat>(Nat.succ(a.pred), b))(
          Hyp0
          Hyp1
        )
  }: (Hyp0: Equal<Bool>(Nat.lte(a, b), true)) -> (Hyp1: Equal<Bool>(Nat.lte(b, a), true)) -> Equal<Nat>(a, b))(
    Hyp0
    Hyp1
  )

Nat.Order.chain.aux(
  a: Nat
  Hyp: Equal<Bool>(Nat.lte(a, 0), true)
): Equal<Nat>(a, 0)
  (case a {
    zero:
      (Hyp)
        Equal.refl<Nat>(0)
    succ:
      (Hyp)
        let contra = Bool.false_neq_true(Hyp)
        Empty.absurd<Equal<Nat>(Nat.succ(a.pred), 0)>(contra)
  }: (Hyp: Equal<Bool>(Nat.lte(a, 0), true)) -> Equal<Nat>(a, 0))(
    Hyp
  )

Nat.Order.chain(
  a: Nat
  b: Nat
  c: Nat
  Hyp0: Equal<Bool>(Nat.lte(a, b), true)
  Hyp1: Equal<Bool>(Nat.lte(b, c), true)
): Equal<Bool>(Nat.lte(a, c), true)
  (case b {
    zero:
      (Hyp0, Hyp1)
        let a_zero = Equal.mirror<Nat>(a, 0, Nat.Order.chain.aux(a, Hyp0))
        let qed = Equal.rewrite<Nat>(0, a, a_zero, (x) Equal<Bool>(Nat.lte(x, c), true), Hyp1)
        qed
    succ:
      (Hyp0, Hyp1)
        (case a {
          zero:
            (Hyp0, Hyp1)
              Equal.refl<Bool>(true)
          succ:
            (Hyp0, Hyp1)
              (case c {
                zero:
                  (Hyp0, Hyp1)
                    let b_zero = Nat.Order.chain.aux(Nat.succ(b.pred), Hyp1)
                    let contra = Nat.succ_neq_zero(b.pred, b_zero)
                    Empty.absurd(Equal<Bool>(Nat.lte(Nat.succ(a.pred), 0), true), contra)
                succ:
                  (Hyp0, Hyp1)
                    let ind = Nat.Order.chain(a.pred, b.pred, c.pred, Hyp0, Hyp1)
                    ind
              }:
                (Hyp0: Equal<Bool>(Nat.lte(Nat.succ(a.pred), Nat.succ(b.pred)), true)) ->
                (Hyp1: Equal<Bool>(Nat.lte(Nat.succ(b.pred), c), true)) ->
                Equal<Bool>(Nat.lte(Nat.succ(a.pred), c), true))(
                  Hyp0
                  Hyp1
                )
        }:
          (Hyp0: Equal<Bool>(Nat.lte(a, Nat.succ(b.pred)), true)) ->
          (Hyp1: Equal<Bool>(Nat.lte(Nat.succ(b.pred), c), true)) ->
          Equal<Bool>(Nat.lte(a, c), true))(
            Hyp0
            Hyp1
          )
  }: (Hyp0: Equal<Bool>(Nat.lte(a, b), true), Hyp1: Equal<Bool>(Nat.lte(b, c), true)) -> Equal<Bool>(Nat.lte(a, c), true))(
    Hyp0
    Hyp1
  )

Nat.Order.add.left(
  a: Nat
  b: Nat
  c: Nat
  Hyp: Equal<Bool>(Nat.lte(a, b), true)
): Equal<Bool>(Nat.lte(Nat.add(c, a), Nat.add(c, b)), true)
  (case c {
    zero:
      (Hyp)
        Hyp
    succ:
      (Hyp)
        Nat.Order.add.left(a, b, c.pred, Hyp)
  }:
    (Hyp: Equal<Bool>(Nat.lte(a, b), true)) ->
    Equal<Bool>(Nat.lte(Nat.add(c, a), Nat.add(c, b)), true))(
      Hyp
    )

Nat.Order.add.right(
  a: Nat
  b: Nat
  c: Nat
  Hyp: Equal<Bool>(Nat.lte(a, b), true)
): Equal<Bool>(Nat.lte(Nat.add(a, c), Nat.add(b, c)), true)
  let lem = Nat.Order.add.left(a, b, c, Hyp)
  let lem = Equal.rewrite<Nat>(
    Nat.add(c, a), Nat.add(a, c), Nat.add.comm(c, a),
    (x) Equal<Bool>(Nat.lte(x, Nat.add(c, b)), true), lem
  )
  let qed = Equal.rewrite<Nat>(
    Nat.add(c, b), Nat.add(b, c), Nat.add.comm(c, b),
    (x) Equal<Bool>(Nat.lte(Nat.add(a, c), x), true), lem
  )
  qed

Nat.Order.add.combine(
  a: Nat
  b: Nat
  c: Nat
  d: Nat
  Hyp0: Equal<Bool>(Nat.lte(a, b), true)
  Hyp1: Equal<Bool>(Nat.lte(c, d), true)
): Equal<Bool>(Nat.lte(Nat.add(a, c), Nat.add(b, d)), true)
  let left_lem = Nat.Order.add.right(a, b, c, Hyp0)
  let right_lem = Nat.Order.add.left(c, d, b, Hyp1)
  let qed = Nat.Order.chain(Nat.add(a, c), Nat.add(b, c), Nat.add(b,d), left_lem, right_lem)
  qed

Nat.Order.mul.left(
  a: Nat
  b: Nat
  c: Nat
  Hyp: Equal<Bool>(Nat.lte(a, b), Bool.true)
): Equal<Bool>(Nat.lte(Nat.mul(c, a), Nat.mul(c, b)), Bool.true)
  // TODO
  case c {
    zero:
      Equal.refl<Bool>(true)
    succ:
      let ind = Nat.Order.mul.left(a, b, c.pred, Hyp)
      let qed = Nat.Order.add.combine(a, b, Nat.mul(c.pred,a),Nat.mul(c.pred,b), Hyp, ind)
      qed
  }: Equal<Bool>(Nat.lte(Nat.mul(c, a), Nat.mul(c, b)), true)


Nat.Order.mul.right(
  a: Nat
  b: Nat
  c: Nat
  Hyp: Equal<Bool>(Nat.lte(a, b), true)
): Equal<Bool>(Nat.lte(Nat.mul(a, c), Nat.mul(b, c)), true)
  let lem = Nat.Order.mul.left(a, b, c, Hyp)
  let lem = Equal.rewrite<Nat>(
    Nat.mul(c,a), Nat.mul(a, c), Nat.mul.comm(c, a)
    (x) Equal<Bool>(Nat.lte(x, Nat.mul(c, b)), Bool.true), lem
  )
  let qed = Equal.rewrite<Nat>(
    Nat.mul(c, b), Nat.mul(b, c), Nat.mul.comm(c, b)
    (x) Equal<Bool>(Nat.lte(Nat.mul(a, c), x), Bool.true), lem
  )
  qed

//Nat.Order.max.big(
//  a: Nat
//  b: Nat
//): And<Equal<Bool>(Nat.lte(a, Nat.max(a, b)), true), Equal<Bool>(Nat.lte(b, Nat.max(a, b)), true)>
//  case a {
//    zero:
//      Pair.new!!(Equal.refl<Bool>(true), Nat.Order.refl(b))
//    succ:
//      let ind = Nat.Order.max(a.pred, b)
//      ?succ
//  }!

Nat.Order.trichotomy(
  a: Nat
  b: Nat
):  Either3<
      Equal<Bool>(Nat.lte(a, b), false)
      Equal<Nat>(a, b)
      Equal<Bool>(Nat.lte(b, a), false)
    >
  def cmp_ab = Nat.lte(a, b)
  def cmp_ba = Nat.lte(b, a)
  let lemma_ab = Equal.refl<Bool>(cmp_ab)
  let lemma_ba = Equal.refl<Bool>(cmp_ba)
  case cmp_ab with lemma_ab: cmp_ab^ == cmp_ab {
    false:
      Either3.fst!!!(Equal.refl<Bool>(false))
    true:
      case cmp_ba with lemma_ba: cmp_ba^ == cmp_ba {
        false:
          Either3.trd!!!(Equal.refl<Bool>(false))
        true:
          Either3.snd!!!(Nat.Order.anti_symm!!(lemma_ab, lemma_ba))
      }!
  }!

//Nat.Order.bernoulli(
//  a: Nat,
//  b: Nat,
//// 1 + a*b <= (1 + a)^b
//): Nat.lte(Nat.add(1, Nat.mul(a, b)), Nat.pow(Nat.add(1, a), b)) == true
//  ?bernoulli
//
//Nat.Order.am_gm2(
//  a: Nat
//  b: Nat
//// 4*a*b <= (a + b)^2
//): Nat.lte(Nat.mul(4, Nat.mul(a, b)), Nat.pow(Nat.add(a, b), 2)) == true
//  ?am_gm2
//
//Nat.Order.am_gm(
//  n: Nat
//  u: Vector<Nat>(n)
//):   Nat.lte(
//       Nat.pow(Vector.Nat.sum(n, u), n)
//       Nat.mul(
//         Nat.pow(n, n)
//         Vector.Nat.product(n, u)))
//     == true
//  ?am_gm
//
//Nat.Order.cauchy(
//  n: Nat
//  u: Vector<Nat>(n)
//  v: Vector<Nat>(n)
//):   Nat.lte(
//       Nat.pow(Vector.Nat.dot(n, u, v), 2)
//       Nat.mul(Vector.Nat.dot(n, u, u), Vector.Nat.dot(n, v, v)))
//     == true
//  ?cauchy
//
//Nat.Order.rearrangement.upper(
//  n: Nat
//  u: Vector<Nat>(n)
//  v: Vector<Nat>(n)
//): Nat.lte(
//     Vector.Nat.dot(n, u, v)
//     Vector.Nat.dot(n, Vector.Nat.sort(n, u), Vector.Nat.sort(n, v)))
//   == true
// ?rearrangement.upper
//
//Nat.Order.rearrangement.lower(
//  n: Nat
//  u: Vector<Nat>(n)
//  v: Vector<Nat>(n)
//): Nat.lte(
//     Vector.Nat.dot(n, Vector.Nat.sort(n, u), Vector.Nat.reverse_sort(n, v))
//     Vector.Nat.dot(n, u, v))
//   == true
// ?rearrangement.lower
//
//Vector.Nat.sum(
//  n: Nat
//  v: Vector<Nat>(n)
//): Nat
//  ?vec.nat.sum
//
//Vector.Nat.product(
//  n: Nat
//  v: Vector<Nat>(n)
//): Nat
//  ?vec.nat.product
//
//Vector.Nat.dot(
//  n: Nat
//  u: Vector<Nat>(n)
//  v: Vector<Nat>(n)
//): Nat
//  ?vec.nat.dot
//
//Vector.Perm<A: Type>(
//  n: Nat
//  u: Vector<A>(n)
//  v: Vector<A>(n)
//): Type
//  ?vector.perm
//
//Vector.Nat.increasing(
//  n: Nat
//  u: Vector<Nat>(n)
//): Type
//  ?vector.nat.increasing
//
//Vector.Nat.decreasing(
//  n: Nat
//  u: Vector<Nat>(n)
//): Type
//  ?vector.nat.decreasing
//
//Vector.Nat.sort(
//  n: Nat
//  u: Vector<Nat>(n)
//): Vector<Nat>(n)
//  ?vector.nat.sort
//
//Vector.Nat.reverse_sort(
//  n: Nat
//  u: Vector<Nat>(n)
//): Vector<Nat>(n)
//  ?vector.nat.reverse_sort
