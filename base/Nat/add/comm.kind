Nat.add.comm(
  a: Nat, b:Nat
): Equal<Nat>(Nat.add(a, b), Nat.add(b, a))
  case a {
    zero:
      Equal.mirror<Nat>(
        Nat.add(b,0), b
        Nat.add.zero_right(b)
      )
    succ: 
      let ind = Nat.add.comm(a.pred, b)
      let lemma = Equal.apply<Nat, Nat>(
        Nat.add(a.pred,b), Nat.add(b,a.pred)
        Nat.succ, ind
      )
      let succ_right = Equal.mirror<Nat>(
        Nat.add(b,Nat.succ(a.pred)), Nat.succ(Nat.add(b,a.pred))
        Nat.add.succ_right(b, a.pred)
      )
      let qed = Equal.rewrite<Nat>(
        Nat.succ(Nat.add(b,a.pred)), Nat.add(b,Nat.succ(a.pred)), succ_right
        (x) Equal<Nat>(Nat.add(Nat.succ(a.pred), b), x)
        lemma
      )
      qed
  }: Equal<Nat>(Nat.add(a, b), Nat.add(b, a))
