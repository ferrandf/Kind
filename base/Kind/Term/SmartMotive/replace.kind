Kind.Term.SmartMotive.replace(term: Kind.Term, from: Kind.Term, to: Kind.Term, lv: Nat): Kind.Term
  //let skip = Debug.log!(String.flatten(["replace term=", Kind.Term.show(term), " from=", Kind.Term.show(from), " to=", Kind.Term.show(to), " lv=", Nat.show(lv)]), (x) Unit.new);
  if Kind.Term.identical(term, from, lv) then
    to
  else case term {
    ref:
      Kind.Term.ref(term.name),
    var:
      Kind.Term.var(term.name, term.indx),
    typ:
      Kind.Term.typ,
    all: 
      let xtyp = Kind.Term.SmartMotive.replace(term.xtyp, from, to, lv);
      let body = term.body(Kind.Term.ref(term.self),Kind.Term.ref(term.name));
      let body = Kind.Term.SmartMotive.replace(body, from, to, Nat.succ(Nat.succ(lv)));
      Kind.Term.all(term.eras, term.self, term.name, xtyp, (s,x) body),
    lam:
      let body = term.body(Kind.Term.ref(term.name));
      let body = Kind.Term.SmartMotive.replace(body, from, to, Nat.succ(lv));
      Kind.Term.lam(term.name, (x) body),
    app:
      let func = Kind.Term.SmartMotive.replace(term.func, from, to, lv);
      let argm = Kind.Term.SmartMotive.replace(term.argm, from, to, lv);
      Kind.Term.app(func, argm),
    let:
      let expr = Kind.Term.SmartMotive.replace(term.expr, from, to, lv);
      let body = term.body(Kind.Term.ref(term.name))
      let body = Kind.Term.SmartMotive.replace(body, from, to, Nat.succ(lv));
      Kind.Term.let(term.name, expr, (x) body),
    def:
      let expr = Kind.Term.SmartMotive.replace(term.expr, from, to, lv);
      let body = term.body(Kind.Term.ref(term.name))
      let body = Kind.Term.SmartMotive.replace(body, from, to, Nat.succ(lv));
      Kind.Term.def(term.name, expr, (x) body),
    ann:
      let term = Kind.Term.SmartMotive.replace(term.term, from, to, lv);
      let type = Kind.Term.SmartMotive.replace(term.type, from, to, lv);
      Kind.Term.ann(term.done, term, type),
    get:
      let expr = Kind.Term.SmartMotive.replace(term.expr, from, to, lv);
      let fkey = term.fkey;
      Kind.Term.get(expr, fkey),
    set:
      let expr = Kind.Term.SmartMotive.replace(term.expr, from, to, lv);
      let fkey = term.fkey;
      let fval = Kind.Term.SmartMotive.replace(term.fval, from, to, lv);
      Kind.Term.set(expr, fkey, fval),
    mut:
      let expr = Kind.Term.SmartMotive.replace(term.expr, from, to, lv);
      let fkey = term.fkey;
      let ffun = Kind.Term.SmartMotive.replace(term.ffun, from, to, lv);
      Kind.Term.set(expr, fkey, ffun),
    ope:
      let arg0 = Kind.Term.SmartMotive.replace(term.arg0, from, to, lv);
      let arg1 = Kind.Term.SmartMotive.replace(term.arg1, from, to, lv);
      Kind.Term.ope(term.name, arg0, arg1)
    imp:
      Kind.Term.SmartMotive.replace(term.expr, from, to, lv),
    ori:
      Kind.Term.SmartMotive.replace(term.expr, from, to, lv),
  } default term
